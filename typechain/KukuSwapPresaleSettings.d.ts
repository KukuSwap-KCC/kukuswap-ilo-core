/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface KukuSwapPresaleSettingsInterface extends ethers.utils.Interface {
  functions: {
    "EARLY_ACCESS_MAP(address)": FunctionFragment;
    "SETTINGS()": FunctionFragment;
    "earlyAccessTokensLength()": FunctionFragment;
    "editEarlyAccessTokens(address,uint256,bool)": FunctionFragment;
    "getBaseFee()": FunctionFragment;
    "getEarlyAccessTokenAtIndex(uint256)": FunctionFragment;
    "getMaxPresaleLength()": FunctionFragment;
    "getRound1Length()": FunctionFragment;
    "getStakingAddress()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setFeeAddress(address)": FunctionFragment;
    "setMaxPresaleLength(uint256)": FunctionFragment;
    "setRound1Length(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userHoldsSufficientRound1Token(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EARLY_ACCESS_MAP",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "SETTINGS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "earlyAccessTokensLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editEarlyAccessTokens",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEarlyAccessTokenAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxPresaleLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRound1Length",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPresaleLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRound1Length",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userHoldsSufficientRound1Token",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "EARLY_ACCESS_MAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SETTINGS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "earlyAccessTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editEarlyAccessTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBaseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEarlyAccessTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPresaleLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRound1Length",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPresaleLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRound1Length",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHoldsSufficientRound1Token",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class KukuSwapPresaleSettings extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: KukuSwapPresaleSettingsInterface;

  functions: {
    EARLY_ACCESS_MAP(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "EARLY_ACCESS_MAP(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    SETTINGS(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        BASE_FEE: BigNumber;
        STAKING_ADDRESS: string;
        ROUND1_LENGTH: BigNumber;
        MAX_PRESALE_LENGTH: BigNumber;
      }
    >;

    "SETTINGS()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        BASE_FEE: BigNumber;
        STAKING_ADDRESS: string;
        ROUND1_LENGTH: BigNumber;
        MAX_PRESALE_LENGTH: BigNumber;
      }
    >;

    earlyAccessTokensLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "earlyAccessTokensLength()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    editEarlyAccessTokens(
      _token: string,
      _holdAmount: BigNumberish,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "editEarlyAccessTokens(address,uint256,bool)"(
      _token: string,
      _holdAmount: BigNumberish,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBaseFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getBaseFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEarlyAccessTokenAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    "getEarlyAccessTokenAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getMaxPresaleLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getMaxPresaleLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRound1Length(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRound1Length()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakingAddress(overrides?: CallOverrides): Promise<[string]>;

    "getStakingAddress()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _stakingAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _stakingAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setFee(
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFee(uint256)"(
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeAddress(
      _stakingAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeAddress(address)"(
      _stakingAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxPresaleLength(
      _maxLength: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxPresaleLength(uint256)"(
      _maxLength: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRound1Length(
      _round1Length: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRound1Length(uint256)"(
      _round1Length: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userHoldsSufficientRound1Token(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "userHoldsSufficientRound1Token(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  EARLY_ACCESS_MAP(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "EARLY_ACCESS_MAP(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  SETTINGS(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber] & {
      BASE_FEE: BigNumber;
      STAKING_ADDRESS: string;
      ROUND1_LENGTH: BigNumber;
      MAX_PRESALE_LENGTH: BigNumber;
    }
  >;

  "SETTINGS()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber] & {
      BASE_FEE: BigNumber;
      STAKING_ADDRESS: string;
      ROUND1_LENGTH: BigNumber;
      MAX_PRESALE_LENGTH: BigNumber;
    }
  >;

  earlyAccessTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

  "earlyAccessTokensLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  editEarlyAccessTokens(
    _token: string,
    _holdAmount: BigNumberish,
    _allow: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "editEarlyAccessTokens(address,uint256,bool)"(
    _token: string,
    _holdAmount: BigNumberish,
    _allow: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBaseFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getBaseFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEarlyAccessTokenAtIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  "getEarlyAccessTokenAtIndex(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber]>;

  getMaxPresaleLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getMaxPresaleLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRound1Length(overrides?: CallOverrides): Promise<BigNumber>;

  "getRound1Length()"(overrides?: CallOverrides): Promise<BigNumber>;

  getStakingAddress(overrides?: CallOverrides): Promise<string>;

  "getStakingAddress()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _stakingAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _stakingAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setFee(
    _baseFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFee(uint256)"(
    _baseFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeAddress(
    _stakingAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeAddress(address)"(
    _stakingAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxPresaleLength(
    _maxLength: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxPresaleLength(uint256)"(
    _maxLength: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRound1Length(
    _round1Length: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRound1Length(uint256)"(
    _round1Length: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userHoldsSufficientRound1Token(
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "userHoldsSufficientRound1Token(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    EARLY_ACCESS_MAP(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "EARLY_ACCESS_MAP(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SETTINGS(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        BASE_FEE: BigNumber;
        STAKING_ADDRESS: string;
        ROUND1_LENGTH: BigNumber;
        MAX_PRESALE_LENGTH: BigNumber;
      }
    >;

    "SETTINGS()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        BASE_FEE: BigNumber;
        STAKING_ADDRESS: string;
        ROUND1_LENGTH: BigNumber;
        MAX_PRESALE_LENGTH: BigNumber;
      }
    >;

    earlyAccessTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    "earlyAccessTokensLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    editEarlyAccessTokens(
      _token: string,
      _holdAmount: BigNumberish,
      _allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "editEarlyAccessTokens(address,uint256,bool)"(
      _token: string,
      _holdAmount: BigNumberish,
      _allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getBaseFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEarlyAccessTokenAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    "getEarlyAccessTokenAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    getMaxPresaleLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxPresaleLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRound1Length(overrides?: CallOverrides): Promise<BigNumber>;

    "getRound1Length()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingAddress(overrides?: CallOverrides): Promise<string>;

    "getStakingAddress()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _stakingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      _stakingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setFee(_baseFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setFee(uint256)"(
      _baseFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeAddress(
      _stakingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeAddress(address)"(
      _stakingAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPresaleLength(
      _maxLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxPresaleLength(uint256)"(
      _maxLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRound1Length(
      _round1Length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRound1Length(uint256)"(
      _round1Length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userHoldsSufficientRound1Token(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "userHoldsSufficientRound1Token(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    EARLY_ACCESS_MAP(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "EARLY_ACCESS_MAP(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    SETTINGS(overrides?: CallOverrides): Promise<BigNumber>;

    "SETTINGS()"(overrides?: CallOverrides): Promise<BigNumber>;

    earlyAccessTokensLength(overrides?: CallOverrides): Promise<BigNumber>;

    "earlyAccessTokensLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    editEarlyAccessTokens(
      _token: string,
      _holdAmount: BigNumberish,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "editEarlyAccessTokens(address,uint256,bool)"(
      _token: string,
      _holdAmount: BigNumberish,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBaseFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getBaseFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEarlyAccessTokenAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getEarlyAccessTokenAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxPresaleLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxPresaleLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRound1Length(overrides?: CallOverrides): Promise<BigNumber>;

    "getRound1Length()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "getStakingAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _stakingAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      _stakingAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setFee(_baseFee: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setFee(uint256)"(
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeAddress(
      _stakingAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeAddress(address)"(
      _stakingAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxPresaleLength(
      _maxLength: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxPresaleLength(uint256)"(
      _maxLength: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRound1Length(
      _round1Length: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRound1Length(uint256)"(
      _round1Length: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userHoldsSufficientRound1Token(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userHoldsSufficientRound1Token(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EARLY_ACCESS_MAP(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "EARLY_ACCESS_MAP(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SETTINGS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SETTINGS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earlyAccessTokensLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earlyAccessTokensLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    editEarlyAccessTokens(
      _token: string,
      _holdAmount: BigNumberish,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "editEarlyAccessTokens(address,uint256,bool)"(
      _token: string,
      _holdAmount: BigNumberish,
      _allow: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBaseFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBaseFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEarlyAccessTokenAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getEarlyAccessTokenAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxPresaleLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxPresaleLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRound1Length(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRound1Length()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getStakingAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _stakingAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _stakingAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setFee(
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFee(uint256)"(
      _baseFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeAddress(
      _stakingAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeAddress(address)"(
      _stakingAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxPresaleLength(
      _maxLength: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxPresaleLength(uint256)"(
      _maxLength: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRound1Length(
      _round1Length: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRound1Length(uint256)"(
      _round1Length: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userHoldsSufficientRound1Token(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userHoldsSufficientRound1Token(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
