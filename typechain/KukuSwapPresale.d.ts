/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface KukuSwapPresaleInterface extends ethers.utils.Interface {
  functions: {
    "BUYERS(address)": FunctionFragment;
    "CONTRACT_VERSION()": FunctionFragment;
    "DEV_ADDRESS()": FunctionFragment;
    "KUKU_FACTORY()": FunctionFragment;
    "PRESALE_FEE_INFO()": FunctionFragment;
    "PRESALE_GENERATOR()": FunctionFragment;
    "PRESALE_INFO()": FunctionFragment;
    "PRESALE_LOCK_FORWARDER()": FunctionFragment;
    "PRESALE_SETTINGS()": FunctionFragment;
    "STATUS()": FunctionFragment;
    "WKCS()": FunctionFragment;
    "addLiquidity()": FunctionFragment;
    "editWhitelist(address[],bool)": FunctionFragment;
    "forceFail()": FunctionFragment;
    "forceFailIfPairExists()": FunctionFragment;
    "getUserWhitelistStatus(address)": FunctionFragment;
    "getWhitelistedUserAtIndex(uint256)": FunctionFragment;
    "getWhitelistedUsersLength()": FunctionFragment;
    "init1(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "init2(address,address,uint256,address)": FunctionFragment;
    "ownerWithdrawTokens()": FunctionFragment;
    "presaleStatus()": FunctionFragment;
    "setDevAddress(address)": FunctionFragment;
    "setWhitelistFlag(bool)": FunctionFragment;
    "updateBlocks(uint256,uint256)": FunctionFragment;
    "updateMaxSpendLimit(uint256)": FunctionFragment;
    "userDeposit(uint256)": FunctionFragment;
    "userWithdrawBaseTokens()": FunctionFragment;
    "userWithdrawTokens()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BUYERS", values: [string]): string;
  encodeFunctionData(
    functionFragment: "CONTRACT_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEV_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KUKU_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRESALE_FEE_INFO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRESALE_GENERATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRESALE_INFO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRESALE_LOCK_FORWARDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRESALE_SETTINGS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "STATUS", values?: undefined): string;
  encodeFunctionData(functionFragment: "WKCS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editWhitelist",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(functionFragment: "forceFail", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "forceFailIfPairExists",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserWhitelistStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedUserAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedUsersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init1",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "init2",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDevAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistFlag",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBlocks",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxSpendLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userWithdrawBaseTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userWithdrawTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "BUYERS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CONTRACT_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEV_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KUKU_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRESALE_FEE_INFO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRESALE_GENERATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRESALE_INFO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRESALE_LOCK_FORWARDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRESALE_SETTINGS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "STATUS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WKCS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forceFail", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceFailIfPairExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserWhitelistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedUserAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedUsersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDevAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxSpendLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWithdrawBaseTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWithdrawTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export class KukuSwapPresale extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: KukuSwapPresaleInterface;

  functions: {
    BUYERS(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        baseDeposited: BigNumber;
        tokensOwed: BigNumber;
      }
    >;

    "BUYERS(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        baseDeposited: BigNumber;
        tokensOwed: BigNumber;
      }
    >;

    CONTRACT_VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    "CONTRACT_VERSION()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEV_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    "DEV_ADDRESS()"(overrides?: CallOverrides): Promise<[string]>;

    KUKU_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    "KUKU_FACTORY()"(overrides?: CallOverrides): Promise<[string]>;

    PRESALE_FEE_INFO(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        KUKU_BASE_FEE: BigNumber;
        BASE_FEE_ADDRESS: string;
        TOKEN_FEE_ADDRESS: string;
      }
    >;

    "PRESALE_FEE_INFO()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        KUKU_BASE_FEE: BigNumber;
        BASE_FEE_ADDRESS: string;
        TOKEN_FEE_ADDRESS: string;
      }
    >;

    PRESALE_GENERATOR(overrides?: CallOverrides): Promise<[string]>;

    "PRESALE_GENERATOR()"(overrides?: CallOverrides): Promise<[string]>;

    PRESALE_INFO(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        PRESALE_OWNER: string;
        S_TOKEN: string;
        B_TOKEN: string;
        TOKEN_PRICE: BigNumber;
        MAX_SPEND_PER_BUYER: BigNumber;
        AMOUNT: BigNumber;
        HARDCAP: BigNumber;
        SOFTCAP: BigNumber;
        LIQUIDITY_PERCENT: BigNumber;
        LISTING_RATE: BigNumber;
        START_BLOCK: BigNumber;
        END_BLOCK: BigNumber;
        LOCK_PERIOD: BigNumber;
        PRESALE_IN_KCS: boolean;
      }
    >;

    "PRESALE_INFO()"(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        PRESALE_OWNER: string;
        S_TOKEN: string;
        B_TOKEN: string;
        TOKEN_PRICE: BigNumber;
        MAX_SPEND_PER_BUYER: BigNumber;
        AMOUNT: BigNumber;
        HARDCAP: BigNumber;
        SOFTCAP: BigNumber;
        LIQUIDITY_PERCENT: BigNumber;
        LISTING_RATE: BigNumber;
        START_BLOCK: BigNumber;
        END_BLOCK: BigNumber;
        LOCK_PERIOD: BigNumber;
        PRESALE_IN_KCS: boolean;
      }
    >;

    PRESALE_LOCK_FORWARDER(overrides?: CallOverrides): Promise<[string]>;

    "PRESALE_LOCK_FORWARDER()"(overrides?: CallOverrides): Promise<[string]>;

    PRESALE_SETTINGS(overrides?: CallOverrides): Promise<[string]>;

    "PRESALE_SETTINGS()"(overrides?: CallOverrides): Promise<[string]>;

    STATUS(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        WHITELIST_ONLY: boolean;
        LP_GENERATION_COMPLETE: boolean;
        FORCE_FAILED: boolean;
        TOTAL_BASE_COLLECTED: BigNumber;
        TOTAL_TOKENS_SOLD: BigNumber;
        TOTAL_TOKENS_WITHDRAWN: BigNumber;
        TOTAL_BASE_WITHDRAWN: BigNumber;
        ROUND1_LENGTH: BigNumber;
        NUM_BUYERS: BigNumber;
      }
    >;

    "STATUS()"(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        WHITELIST_ONLY: boolean;
        LP_GENERATION_COMPLETE: boolean;
        FORCE_FAILED: boolean;
        TOTAL_BASE_COLLECTED: BigNumber;
        TOTAL_TOKENS_SOLD: BigNumber;
        TOTAL_TOKENS_WITHDRAWN: BigNumber;
        TOTAL_BASE_WITHDRAWN: BigNumber;
        ROUND1_LENGTH: BigNumber;
        NUM_BUYERS: BigNumber;
      }
    >;

    WKCS(overrides?: CallOverrides): Promise<[string]>;

    "WKCS()"(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(overrides?: Overrides): Promise<ContractTransaction>;

    "addLiquidity()"(overrides?: Overrides): Promise<ContractTransaction>;

    editWhitelist(
      _users: string[],
      _add: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "editWhitelist(address[],bool)"(
      _users: string[],
      _add: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    forceFail(overrides?: Overrides): Promise<ContractTransaction>;

    "forceFail()"(overrides?: Overrides): Promise<ContractTransaction>;

    forceFailIfPairExists(overrides?: Overrides): Promise<ContractTransaction>;

    "forceFailIfPairExists()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getUserWhitelistStatus(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "getUserWhitelistStatus(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getWhitelistedUserAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getWhitelistedUserAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWhitelistedUsersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getWhitelistedUsersLength()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    init1(
      _presaleOwner: string,
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      _maxKCSPerBuyer: BigNumberish,
      _hardcap: BigNumberish,
      _softcap: BigNumberish,
      _liquidityPercent: BigNumberish,
      _listingRate: BigNumberish,
      _startblock: BigNumberish,
      _endblock: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init1(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _presaleOwner: string,
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      _maxKCSPerBuyer: BigNumberish,
      _hardcap: BigNumberish,
      _softcap: BigNumberish,
      _liquidityPercent: BigNumberish,
      _listingRate: BigNumberish,
      _startblock: BigNumberish,
      _endblock: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    init2(
      _baseToken: string,
      _presaleToken: string,
      _kukuBaseFee: BigNumberish,
      _baseFeeAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init2(address,address,uint256,address)"(
      _baseToken: string,
      _presaleToken: string,
      _kukuBaseFee: BigNumberish,
      _baseFeeAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ownerWithdrawTokens(overrides?: Overrides): Promise<ContractTransaction>;

    "ownerWithdrawTokens()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    presaleStatus(overrides?: CallOverrides): Promise<[BigNumber]>;

    "presaleStatus()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setDevAddress(
      newDevAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDevAddress(address)"(
      newDevAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWhitelistFlag(
      _flag: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWhitelistFlag(bool)"(
      _flag: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateBlocks(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateBlocks(uint256,uint256)"(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMaxSpendLimit(
      _maxSpend: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMaxSpendLimit(uint256)"(
      _maxSpend: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userDeposit(
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "userDeposit(uint256)"(
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    userWithdrawBaseTokens(overrides?: Overrides): Promise<ContractTransaction>;

    "userWithdrawBaseTokens()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userWithdrawTokens(overrides?: Overrides): Promise<ContractTransaction>;

    "userWithdrawTokens()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  BUYERS(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { baseDeposited: BigNumber; tokensOwed: BigNumber }
  >;

  "BUYERS(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { baseDeposited: BigNumber; tokensOwed: BigNumber }
  >;

  CONTRACT_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

  "CONTRACT_VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

  DEV_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "DEV_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  KUKU_FACTORY(overrides?: CallOverrides): Promise<string>;

  "KUKU_FACTORY()"(overrides?: CallOverrides): Promise<string>;

  PRESALE_FEE_INFO(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      KUKU_BASE_FEE: BigNumber;
      BASE_FEE_ADDRESS: string;
      TOKEN_FEE_ADDRESS: string;
    }
  >;

  "PRESALE_FEE_INFO()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string] & {
      KUKU_BASE_FEE: BigNumber;
      BASE_FEE_ADDRESS: string;
      TOKEN_FEE_ADDRESS: string;
    }
  >;

  PRESALE_GENERATOR(overrides?: CallOverrides): Promise<string>;

  "PRESALE_GENERATOR()"(overrides?: CallOverrides): Promise<string>;

  PRESALE_INFO(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      PRESALE_OWNER: string;
      S_TOKEN: string;
      B_TOKEN: string;
      TOKEN_PRICE: BigNumber;
      MAX_SPEND_PER_BUYER: BigNumber;
      AMOUNT: BigNumber;
      HARDCAP: BigNumber;
      SOFTCAP: BigNumber;
      LIQUIDITY_PERCENT: BigNumber;
      LISTING_RATE: BigNumber;
      START_BLOCK: BigNumber;
      END_BLOCK: BigNumber;
      LOCK_PERIOD: BigNumber;
      PRESALE_IN_KCS: boolean;
    }
  >;

  "PRESALE_INFO()"(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      PRESALE_OWNER: string;
      S_TOKEN: string;
      B_TOKEN: string;
      TOKEN_PRICE: BigNumber;
      MAX_SPEND_PER_BUYER: BigNumber;
      AMOUNT: BigNumber;
      HARDCAP: BigNumber;
      SOFTCAP: BigNumber;
      LIQUIDITY_PERCENT: BigNumber;
      LISTING_RATE: BigNumber;
      START_BLOCK: BigNumber;
      END_BLOCK: BigNumber;
      LOCK_PERIOD: BigNumber;
      PRESALE_IN_KCS: boolean;
    }
  >;

  PRESALE_LOCK_FORWARDER(overrides?: CallOverrides): Promise<string>;

  "PRESALE_LOCK_FORWARDER()"(overrides?: CallOverrides): Promise<string>;

  PRESALE_SETTINGS(overrides?: CallOverrides): Promise<string>;

  "PRESALE_SETTINGS()"(overrides?: CallOverrides): Promise<string>;

  STATUS(
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      WHITELIST_ONLY: boolean;
      LP_GENERATION_COMPLETE: boolean;
      FORCE_FAILED: boolean;
      TOTAL_BASE_COLLECTED: BigNumber;
      TOTAL_TOKENS_SOLD: BigNumber;
      TOTAL_TOKENS_WITHDRAWN: BigNumber;
      TOTAL_BASE_WITHDRAWN: BigNumber;
      ROUND1_LENGTH: BigNumber;
      NUM_BUYERS: BigNumber;
    }
  >;

  "STATUS()"(
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      WHITELIST_ONLY: boolean;
      LP_GENERATION_COMPLETE: boolean;
      FORCE_FAILED: boolean;
      TOTAL_BASE_COLLECTED: BigNumber;
      TOTAL_TOKENS_SOLD: BigNumber;
      TOTAL_TOKENS_WITHDRAWN: BigNumber;
      TOTAL_BASE_WITHDRAWN: BigNumber;
      ROUND1_LENGTH: BigNumber;
      NUM_BUYERS: BigNumber;
    }
  >;

  WKCS(overrides?: CallOverrides): Promise<string>;

  "WKCS()"(overrides?: CallOverrides): Promise<string>;

  addLiquidity(overrides?: Overrides): Promise<ContractTransaction>;

  "addLiquidity()"(overrides?: Overrides): Promise<ContractTransaction>;

  editWhitelist(
    _users: string[],
    _add: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "editWhitelist(address[],bool)"(
    _users: string[],
    _add: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  forceFail(overrides?: Overrides): Promise<ContractTransaction>;

  "forceFail()"(overrides?: Overrides): Promise<ContractTransaction>;

  forceFailIfPairExists(overrides?: Overrides): Promise<ContractTransaction>;

  "forceFailIfPairExists()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getUserWhitelistStatus(
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getUserWhitelistStatus(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getWhitelistedUserAtIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getWhitelistedUserAtIndex(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getWhitelistedUsersLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getWhitelistedUsersLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  init1(
    _presaleOwner: string,
    _amount: BigNumberish,
    _tokenPrice: BigNumberish,
    _maxKCSPerBuyer: BigNumberish,
    _hardcap: BigNumberish,
    _softcap: BigNumberish,
    _liquidityPercent: BigNumberish,
    _listingRate: BigNumberish,
    _startblock: BigNumberish,
    _endblock: BigNumberish,
    _lockPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "init1(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
    _presaleOwner: string,
    _amount: BigNumberish,
    _tokenPrice: BigNumberish,
    _maxKCSPerBuyer: BigNumberish,
    _hardcap: BigNumberish,
    _softcap: BigNumberish,
    _liquidityPercent: BigNumberish,
    _listingRate: BigNumberish,
    _startblock: BigNumberish,
    _endblock: BigNumberish,
    _lockPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  init2(
    _baseToken: string,
    _presaleToken: string,
    _kukuBaseFee: BigNumberish,
    _baseFeeAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "init2(address,address,uint256,address)"(
    _baseToken: string,
    _presaleToken: string,
    _kukuBaseFee: BigNumberish,
    _baseFeeAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ownerWithdrawTokens(overrides?: Overrides): Promise<ContractTransaction>;

  "ownerWithdrawTokens()"(overrides?: Overrides): Promise<ContractTransaction>;

  presaleStatus(overrides?: CallOverrides): Promise<BigNumber>;

  "presaleStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

  setDevAddress(
    newDevAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDevAddress(address)"(
    newDevAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWhitelistFlag(
    _flag: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWhitelistFlag(bool)"(
    _flag: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateBlocks(
    _startBlock: BigNumberish,
    _endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateBlocks(uint256,uint256)"(
    _startBlock: BigNumberish,
    _endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMaxSpendLimit(
    _maxSpend: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMaxSpendLimit(uint256)"(
    _maxSpend: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userDeposit(
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "userDeposit(uint256)"(
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  userWithdrawBaseTokens(overrides?: Overrides): Promise<ContractTransaction>;

  "userWithdrawBaseTokens()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userWithdrawTokens(overrides?: Overrides): Promise<ContractTransaction>;

  "userWithdrawTokens()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    BUYERS(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        baseDeposited: BigNumber;
        tokensOwed: BigNumber;
      }
    >;

    "BUYERS(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        baseDeposited: BigNumber;
        tokensOwed: BigNumber;
      }
    >;

    CONTRACT_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTRACT_VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEV_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "DEV_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

    KUKU_FACTORY(overrides?: CallOverrides): Promise<string>;

    "KUKU_FACTORY()"(overrides?: CallOverrides): Promise<string>;

    PRESALE_FEE_INFO(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        KUKU_BASE_FEE: BigNumber;
        BASE_FEE_ADDRESS: string;
        TOKEN_FEE_ADDRESS: string;
      }
    >;

    "PRESALE_FEE_INFO()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string] & {
        KUKU_BASE_FEE: BigNumber;
        BASE_FEE_ADDRESS: string;
        TOKEN_FEE_ADDRESS: string;
      }
    >;

    PRESALE_GENERATOR(overrides?: CallOverrides): Promise<string>;

    "PRESALE_GENERATOR()"(overrides?: CallOverrides): Promise<string>;

    PRESALE_INFO(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        PRESALE_OWNER: string;
        S_TOKEN: string;
        B_TOKEN: string;
        TOKEN_PRICE: BigNumber;
        MAX_SPEND_PER_BUYER: BigNumber;
        AMOUNT: BigNumber;
        HARDCAP: BigNumber;
        SOFTCAP: BigNumber;
        LIQUIDITY_PERCENT: BigNumber;
        LISTING_RATE: BigNumber;
        START_BLOCK: BigNumber;
        END_BLOCK: BigNumber;
        LOCK_PERIOD: BigNumber;
        PRESALE_IN_KCS: boolean;
      }
    >;

    "PRESALE_INFO()"(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        PRESALE_OWNER: string;
        S_TOKEN: string;
        B_TOKEN: string;
        TOKEN_PRICE: BigNumber;
        MAX_SPEND_PER_BUYER: BigNumber;
        AMOUNT: BigNumber;
        HARDCAP: BigNumber;
        SOFTCAP: BigNumber;
        LIQUIDITY_PERCENT: BigNumber;
        LISTING_RATE: BigNumber;
        START_BLOCK: BigNumber;
        END_BLOCK: BigNumber;
        LOCK_PERIOD: BigNumber;
        PRESALE_IN_KCS: boolean;
      }
    >;

    PRESALE_LOCK_FORWARDER(overrides?: CallOverrides): Promise<string>;

    "PRESALE_LOCK_FORWARDER()"(overrides?: CallOverrides): Promise<string>;

    PRESALE_SETTINGS(overrides?: CallOverrides): Promise<string>;

    "PRESALE_SETTINGS()"(overrides?: CallOverrides): Promise<string>;

    STATUS(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        WHITELIST_ONLY: boolean;
        LP_GENERATION_COMPLETE: boolean;
        FORCE_FAILED: boolean;
        TOTAL_BASE_COLLECTED: BigNumber;
        TOTAL_TOKENS_SOLD: BigNumber;
        TOTAL_TOKENS_WITHDRAWN: BigNumber;
        TOTAL_BASE_WITHDRAWN: BigNumber;
        ROUND1_LENGTH: BigNumber;
        NUM_BUYERS: BigNumber;
      }
    >;

    "STATUS()"(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        boolean,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        WHITELIST_ONLY: boolean;
        LP_GENERATION_COMPLETE: boolean;
        FORCE_FAILED: boolean;
        TOTAL_BASE_COLLECTED: BigNumber;
        TOTAL_TOKENS_SOLD: BigNumber;
        TOTAL_TOKENS_WITHDRAWN: BigNumber;
        TOTAL_BASE_WITHDRAWN: BigNumber;
        ROUND1_LENGTH: BigNumber;
        NUM_BUYERS: BigNumber;
      }
    >;

    WKCS(overrides?: CallOverrides): Promise<string>;

    "WKCS()"(overrides?: CallOverrides): Promise<string>;

    addLiquidity(overrides?: CallOverrides): Promise<void>;

    "addLiquidity()"(overrides?: CallOverrides): Promise<void>;

    editWhitelist(
      _users: string[],
      _add: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "editWhitelist(address[],bool)"(
      _users: string[],
      _add: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    forceFail(overrides?: CallOverrides): Promise<void>;

    "forceFail()"(overrides?: CallOverrides): Promise<void>;

    forceFailIfPairExists(overrides?: CallOverrides): Promise<void>;

    "forceFailIfPairExists()"(overrides?: CallOverrides): Promise<void>;

    getUserWhitelistStatus(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getUserWhitelistStatus(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getWhitelistedUserAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getWhitelistedUserAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getWhitelistedUsersLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getWhitelistedUsersLength()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init1(
      _presaleOwner: string,
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      _maxKCSPerBuyer: BigNumberish,
      _hardcap: BigNumberish,
      _softcap: BigNumberish,
      _liquidityPercent: BigNumberish,
      _listingRate: BigNumberish,
      _startblock: BigNumberish,
      _endblock: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "init1(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _presaleOwner: string,
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      _maxKCSPerBuyer: BigNumberish,
      _hardcap: BigNumberish,
      _softcap: BigNumberish,
      _liquidityPercent: BigNumberish,
      _listingRate: BigNumberish,
      _startblock: BigNumberish,
      _endblock: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    init2(
      _baseToken: string,
      _presaleToken: string,
      _kukuBaseFee: BigNumberish,
      _baseFeeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "init2(address,address,uint256,address)"(
      _baseToken: string,
      _presaleToken: string,
      _kukuBaseFee: BigNumberish,
      _baseFeeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerWithdrawTokens(overrides?: CallOverrides): Promise<void>;

    "ownerWithdrawTokens()"(overrides?: CallOverrides): Promise<void>;

    presaleStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "presaleStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDevAddress(
      newDevAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDevAddress(address)"(
      newDevAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelistFlag(_flag: boolean, overrides?: CallOverrides): Promise<void>;

    "setWhitelistFlag(bool)"(
      _flag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBlocks(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBlocks(uint256,uint256)"(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMaxSpendLimit(
      _maxSpend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMaxSpendLimit(uint256)"(
      _maxSpend: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userDeposit(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "userDeposit(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userWithdrawBaseTokens(overrides?: CallOverrides): Promise<void>;

    "userWithdrawBaseTokens()"(overrides?: CallOverrides): Promise<void>;

    userWithdrawTokens(overrides?: CallOverrides): Promise<void>;

    "userWithdrawTokens()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    BUYERS(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "BUYERS(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CONTRACT_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTRACT_VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEV_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "DEV_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    KUKU_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    "KUKU_FACTORY()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_FEE_INFO(overrides?: CallOverrides): Promise<BigNumber>;

    "PRESALE_FEE_INFO()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_GENERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "PRESALE_GENERATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_INFO(overrides?: CallOverrides): Promise<BigNumber>;

    "PRESALE_INFO()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_LOCK_FORWARDER(overrides?: CallOverrides): Promise<BigNumber>;

    "PRESALE_LOCK_FORWARDER()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_SETTINGS(overrides?: CallOverrides): Promise<BigNumber>;

    "PRESALE_SETTINGS()"(overrides?: CallOverrides): Promise<BigNumber>;

    STATUS(overrides?: CallOverrides): Promise<BigNumber>;

    "STATUS()"(overrides?: CallOverrides): Promise<BigNumber>;

    WKCS(overrides?: CallOverrides): Promise<BigNumber>;

    "WKCS()"(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(overrides?: Overrides): Promise<BigNumber>;

    "addLiquidity()"(overrides?: Overrides): Promise<BigNumber>;

    editWhitelist(
      _users: string[],
      _add: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "editWhitelist(address[],bool)"(
      _users: string[],
      _add: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    forceFail(overrides?: Overrides): Promise<BigNumber>;

    "forceFail()"(overrides?: Overrides): Promise<BigNumber>;

    forceFailIfPairExists(overrides?: Overrides): Promise<BigNumber>;

    "forceFailIfPairExists()"(overrides?: Overrides): Promise<BigNumber>;

    getUserWhitelistStatus(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserWhitelistStatus(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelistedUserAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWhitelistedUserAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelistedUsersLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getWhitelistedUsersLength()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init1(
      _presaleOwner: string,
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      _maxKCSPerBuyer: BigNumberish,
      _hardcap: BigNumberish,
      _softcap: BigNumberish,
      _liquidityPercent: BigNumberish,
      _listingRate: BigNumberish,
      _startblock: BigNumberish,
      _endblock: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "init1(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _presaleOwner: string,
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      _maxKCSPerBuyer: BigNumberish,
      _hardcap: BigNumberish,
      _softcap: BigNumberish,
      _liquidityPercent: BigNumberish,
      _listingRate: BigNumberish,
      _startblock: BigNumberish,
      _endblock: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    init2(
      _baseToken: string,
      _presaleToken: string,
      _kukuBaseFee: BigNumberish,
      _baseFeeAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "init2(address,address,uint256,address)"(
      _baseToken: string,
      _presaleToken: string,
      _kukuBaseFee: BigNumberish,
      _baseFeeAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ownerWithdrawTokens(overrides?: Overrides): Promise<BigNumber>;

    "ownerWithdrawTokens()"(overrides?: Overrides): Promise<BigNumber>;

    presaleStatus(overrides?: CallOverrides): Promise<BigNumber>;

    "presaleStatus()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDevAddress(
      newDevAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDevAddress(address)"(
      newDevAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWhitelistFlag(_flag: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setWhitelistFlag(bool)"(
      _flag: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateBlocks(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateBlocks(uint256,uint256)"(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateMaxSpendLimit(
      _maxSpend: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMaxSpendLimit(uint256)"(
      _maxSpend: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userDeposit(
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "userDeposit(uint256)"(
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    userWithdrawBaseTokens(overrides?: Overrides): Promise<BigNumber>;

    "userWithdrawBaseTokens()"(overrides?: Overrides): Promise<BigNumber>;

    userWithdrawTokens(overrides?: Overrides): Promise<BigNumber>;

    "userWithdrawTokens()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BUYERS(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "BUYERS(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CONTRACT_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CONTRACT_VERSION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEV_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DEV_ADDRESS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    KUKU_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "KUKU_FACTORY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRESALE_FEE_INFO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PRESALE_FEE_INFO()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRESALE_GENERATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PRESALE_GENERATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRESALE_INFO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PRESALE_INFO()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRESALE_LOCK_FORWARDER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "PRESALE_LOCK_FORWARDER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRESALE_SETTINGS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PRESALE_SETTINGS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    STATUS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "STATUS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WKCS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WKCS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(overrides?: Overrides): Promise<PopulatedTransaction>;

    "addLiquidity()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    editWhitelist(
      _users: string[],
      _add: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "editWhitelist(address[],bool)"(
      _users: string[],
      _add: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    forceFail(overrides?: Overrides): Promise<PopulatedTransaction>;

    "forceFail()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    forceFailIfPairExists(overrides?: Overrides): Promise<PopulatedTransaction>;

    "forceFailIfPairExists()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getUserWhitelistStatus(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserWhitelistStatus(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelistedUserAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWhitelistedUserAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelistedUsersLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWhitelistedUsersLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init1(
      _presaleOwner: string,
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      _maxKCSPerBuyer: BigNumberish,
      _hardcap: BigNumberish,
      _softcap: BigNumberish,
      _liquidityPercent: BigNumberish,
      _listingRate: BigNumberish,
      _startblock: BigNumberish,
      _endblock: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init1(address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _presaleOwner: string,
      _amount: BigNumberish,
      _tokenPrice: BigNumberish,
      _maxKCSPerBuyer: BigNumberish,
      _hardcap: BigNumberish,
      _softcap: BigNumberish,
      _liquidityPercent: BigNumberish,
      _listingRate: BigNumberish,
      _startblock: BigNumberish,
      _endblock: BigNumberish,
      _lockPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    init2(
      _baseToken: string,
      _presaleToken: string,
      _kukuBaseFee: BigNumberish,
      _baseFeeAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init2(address,address,uint256,address)"(
      _baseToken: string,
      _presaleToken: string,
      _kukuBaseFee: BigNumberish,
      _baseFeeAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ownerWithdrawTokens(overrides?: Overrides): Promise<PopulatedTransaction>;

    "ownerWithdrawTokens()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    presaleStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "presaleStatus()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDevAddress(
      newDevAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDevAddress(address)"(
      newDevAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWhitelistFlag(
      _flag: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWhitelistFlag(bool)"(
      _flag: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateBlocks(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateBlocks(uint256,uint256)"(
      _startBlock: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateMaxSpendLimit(
      _maxSpend: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMaxSpendLimit(uint256)"(
      _maxSpend: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userDeposit(
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "userDeposit(uint256)"(
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    userWithdrawBaseTokens(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "userWithdrawBaseTokens()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userWithdrawTokens(overrides?: Overrides): Promise<PopulatedTransaction>;

    "userWithdrawTokens()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
