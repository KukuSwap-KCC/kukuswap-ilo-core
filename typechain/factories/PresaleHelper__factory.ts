/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { PresaleHelper } from "../PresaleHelper";

export class PresaleHelper__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<PresaleHelper> {
    return super.deploy(overrides || {}) as Promise<PresaleHelper>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PresaleHelper {
    return super.attach(address) as PresaleHelper;
  }
  connect(signer: Signer): PresaleHelper__factory {
    return super.connect(signer) as PresaleHelper__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PresaleHelper {
    return new Contract(address, _abi, signerOrProvider) as PresaleHelper;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_tokenPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_listingRate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_liquidityPercent",
        type: "uint256",
      },
    ],
    name: "calculateAmountRequired",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x610247610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063acc7d4dd1461003a575b600080fd5b6100696004803603608081101561005057600080fd5b508035906020810135906040810135906060013561007b565b60408051918252519081900360200190f35b6000806100948561008e866103e86100cd565b9061012f565b905060006100b3620f424061008e846100ad8b896100cd565b906100cd565b905060006100c18883610196565b98975050505050505050565b6000826100dc57506000610129565b828202828482816100e957fe5b04146101265760405162461bcd60e51b81526004018080602001828103825260218152602001806101f16021913960400191505060405180910390fd5b90505b92915050565b6000808211610185576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161018e57fe5b049392505050565b600082820183811015610126576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fdfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220c7b4bd021ea0f540ab8533d22c1c910f4f955b424c8e3a2675832a62d014f4ff64736f6c634300060c0033";
