/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface KukuSwapLockerInterface extends ethers.utils.Interface {
  functions: {
    "gFees()": FunctionFragment;
    "getLockedTokenAtIndex(uint256)": FunctionFragment;
    "getNumLockedTokens()": FunctionFragment;
    "getNumLocksForToken(address)": FunctionFragment;
    "getUserLockForTokenAtIndex(address,address,uint256)": FunctionFragment;
    "getUserLockedTokenAtIndex(address,uint256)": FunctionFragment;
    "getUserNumLockedTokens(address)": FunctionFragment;
    "getUserNumLocksForToken(address,address)": FunctionFragment;
    "getUserWhitelistStatus(address)": FunctionFragment;
    "getWhitelistedUserAtIndex(uint256)": FunctionFragment;
    "getWhitelistedUsersLength()": FunctionFragment;
    "incrementLock(address,uint256,uint256,uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "kukuswapFactory()": FunctionFragment;
    "lockLPToken(address,uint256,uint256,bool,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "relock(address,uint256,uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDev(address)": FunctionFragment;
    "setFee(uint256,uint256)": FunctionFragment;
    "splitLock(address,uint256,uint256,uint256)": FunctionFragment;
    "tokenLocks(address,uint256)": FunctionFragment;
    "transferLockOwnership(address,uint256,uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelistFeeAccount(address,bool)": FunctionFragment;
    "withdraw(address,uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "gFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLockedTokenAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumLockedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumLocksForToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLockForTokenAtIndex",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLockedTokenAtIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNumLockedTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNumLocksForToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserWhitelistStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedUserAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedUsersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementLock",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "kukuswapFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockLPToken",
    values: [string, BigNumberish, BigNumberish, boolean, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "relock",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setDev", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "splitLock",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenLocks",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferLockOwnership",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistFeeAccount",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "gFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLockedTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumLockedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumLocksForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLockForTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLockedTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNumLockedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNumLocksForToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserWhitelistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedUserAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedUsersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kukuswapFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockLPToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setDev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "splitLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenLocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferLockOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistFeeAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "onDeposit(address,address,uint256,uint256,uint256)": EventFragment;
    "onWithdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "onDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "onWithdraw"): EventFragment;
}

export class KukuSwapLocker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: KukuSwapLockerInterface;

  functions: {
    gFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { kcsFee: BigNumber; liquidityFee: BigNumber }
    >;

    "gFees()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { kcsFee: BigNumber; liquidityFee: BigNumber }
    >;

    getLockedTokenAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getLockedTokenAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNumLockedTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNumLockedTokens()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNumLocksForToken(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNumLocksForToken(address)"(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserLockForTokenAtIndex(
      _user: string,
      _lpToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string]>;

    "getUserLockForTokenAtIndex(address,address,uint256)"(
      _user: string,
      _lpToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string]>;

    getUserLockedTokenAtIndex(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getUserLockedTokenAtIndex(address,uint256)"(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserNumLockedTokens(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUserNumLockedTokens(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserNumLocksForToken(
      _user: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUserNumLocksForToken(address,address)"(
      _user: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserWhitelistStatus(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "getUserWhitelistStatus(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getWhitelistedUserAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getWhitelistedUserAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWhitelistedUsersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getWhitelistedUsersLength()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    incrementLock(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incrementLock(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _kukuswapFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _kukuswapFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    kukuswapFactory(overrides?: CallOverrides): Promise<[string]>;

    "kukuswapFactory()"(overrides?: CallOverrides): Promise<[string]>;

    lockLPToken(
      _lpToken: string,
      _amount: BigNumberish,
      _unlock_block: BigNumberish,
      _fee_in_kcs: boolean,
      _withdrawer: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "lockLPToken(address,uint256,uint256,bool,address)"(
      _lpToken: string,
      _amount: BigNumberish,
      _unlock_block: BigNumberish,
      _fee_in_kcs: boolean,
      _withdrawer: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    relock(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _unlock_block: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "relock(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _unlock_block: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setDev(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDev(address)"(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFee(
      _kcsFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFee(uint256,uint256)"(
      _kcsFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    splitLock(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "splitLock(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    tokenLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        lockDate: BigNumber;
        amount: BigNumber;
        initialAmount: BigNumber;
        unlockBlock: BigNumber;
        lockID: BigNumber;
        owner: string;
      }
    >;

    "tokenLocks(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        lockDate: BigNumber;
        amount: BigNumber;
        initialAmount: BigNumber;
        unlockBlock: BigNumber;
        lockID: BigNumber;
        owner: string;
      }
    >;

    transferLockOwnership(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferLockOwnership(address,uint256,uint256,address)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    whitelistFeeAccount(
      _user: string,
      _add: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "whitelistFeeAccount(address,bool)"(
      _user: string,
      _add: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  gFees(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { kcsFee: BigNumber; liquidityFee: BigNumber }
  >;

  "gFees()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { kcsFee: BigNumber; liquidityFee: BigNumber }
  >;

  getLockedTokenAtIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getLockedTokenAtIndex(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getNumLockedTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumLockedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

  getNumLocksForToken(
    _lpToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNumLocksForToken(address)"(
    _lpToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserLockForTokenAtIndex(
    _user: string,
    _lpToken: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string]>;

  "getUserLockForTokenAtIndex(address,address,uint256)"(
    _user: string,
    _lpToken: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string]>;

  getUserLockedTokenAtIndex(
    _user: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getUserLockedTokenAtIndex(address,uint256)"(
    _user: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserNumLockedTokens(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserNumLockedTokens(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserNumLocksForToken(
    _user: string,
    _lpToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserNumLocksForToken(address,address)"(
    _user: string,
    _lpToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserWhitelistStatus(
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "getUserWhitelistStatus(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getWhitelistedUserAtIndex(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getWhitelistedUserAtIndex(uint256)"(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getWhitelistedUsersLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getWhitelistedUsersLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  incrementLock(
    _lpToken: string,
    _index: BigNumberish,
    _lockID: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incrementLock(address,uint256,uint256,uint256)"(
    _lpToken: string,
    _index: BigNumberish,
    _lockID: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _kukuswapFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _kukuswapFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  kukuswapFactory(overrides?: CallOverrides): Promise<string>;

  "kukuswapFactory()"(overrides?: CallOverrides): Promise<string>;

  lockLPToken(
    _lpToken: string,
    _amount: BigNumberish,
    _unlock_block: BigNumberish,
    _fee_in_kcs: boolean,
    _withdrawer: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "lockLPToken(address,uint256,uint256,bool,address)"(
    _lpToken: string,
    _amount: BigNumberish,
    _unlock_block: BigNumberish,
    _fee_in_kcs: boolean,
    _withdrawer: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  relock(
    _lpToken: string,
    _index: BigNumberish,
    _lockID: BigNumberish,
    _unlock_block: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "relock(address,uint256,uint256,uint256)"(
    _lpToken: string,
    _index: BigNumberish,
    _lockID: BigNumberish,
    _unlock_block: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setDev(_devaddr: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setDev(address)"(
    _devaddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFee(
    _kcsFee: BigNumberish,
    _liquidityFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFee(uint256,uint256)"(
    _kcsFee: BigNumberish,
    _liquidityFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  splitLock(
    _lpToken: string,
    _index: BigNumberish,
    _lockID: BigNumberish,
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "splitLock(address,uint256,uint256,uint256)"(
    _lpToken: string,
    _index: BigNumberish,
    _lockID: BigNumberish,
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  tokenLocks(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      lockDate: BigNumber;
      amount: BigNumber;
      initialAmount: BigNumber;
      unlockBlock: BigNumber;
      lockID: BigNumber;
      owner: string;
    }
  >;

  "tokenLocks(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
      lockDate: BigNumber;
      amount: BigNumber;
      initialAmount: BigNumber;
      unlockBlock: BigNumber;
      lockID: BigNumber;
      owner: string;
    }
  >;

  transferLockOwnership(
    _lpToken: string,
    _index: BigNumberish,
    _lockID: BigNumberish,
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferLockOwnership(address,uint256,uint256,address)"(
    _lpToken: string,
    _index: BigNumberish,
    _lockID: BigNumberish,
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  whitelistFeeAccount(
    _user: string,
    _add: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "whitelistFeeAccount(address,bool)"(
    _user: string,
    _add: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    _lpToken: string,
    _index: BigNumberish,
    _lockID: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256,uint256,uint256)"(
    _lpToken: string,
    _index: BigNumberish,
    _lockID: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    gFees(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { kcsFee: BigNumber; liquidityFee: BigNumber }
    >;

    "gFees()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { kcsFee: BigNumber; liquidityFee: BigNumber }
    >;

    getLockedTokenAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getLockedTokenAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNumLockedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumLockedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumLocksForToken(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumLocksForToken(address)"(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLockForTokenAtIndex(
      _user: string,
      _lpToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string]>;

    "getUserLockForTokenAtIndex(address,address,uint256)"(
      _user: string,
      _lpToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string]>;

    getUserLockedTokenAtIndex(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getUserLockedTokenAtIndex(address,uint256)"(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserNumLockedTokens(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserNumLockedTokens(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserNumLocksForToken(
      _user: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserNumLocksForToken(address,address)"(
      _user: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserWhitelistStatus(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "getUserWhitelistStatus(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getWhitelistedUserAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getWhitelistedUserAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getWhitelistedUsersLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getWhitelistedUsersLength()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementLock(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "incrementLock(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _kukuswapFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      _kukuswapFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    kukuswapFactory(overrides?: CallOverrides): Promise<string>;

    "kukuswapFactory()"(overrides?: CallOverrides): Promise<string>;

    lockLPToken(
      _lpToken: string,
      _amount: BigNumberish,
      _unlock_block: BigNumberish,
      _fee_in_kcs: boolean,
      _withdrawer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockLPToken(address,uint256,uint256,bool,address)"(
      _lpToken: string,
      _amount: BigNumberish,
      _unlock_block: BigNumberish,
      _fee_in_kcs: boolean,
      _withdrawer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    relock(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _unlock_block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "relock(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _unlock_block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setDev(_devaddr: string, overrides?: CallOverrides): Promise<void>;

    "setDev(address)"(
      _devaddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      _kcsFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFee(uint256,uint256)"(
      _kcsFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    splitLock(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "splitLock(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        lockDate: BigNumber;
        amount: BigNumber;
        initialAmount: BigNumber;
        unlockBlock: BigNumber;
        lockID: BigNumber;
        owner: string;
      }
    >;

    "tokenLocks(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string] & {
        lockDate: BigNumber;
        amount: BigNumber;
        initialAmount: BigNumber;
        unlockBlock: BigNumber;
        lockID: BigNumber;
        owner: string;
      }
    >;

    transferLockOwnership(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferLockOwnership(address,uint256,uint256,address)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistFeeAccount(
      _user: string,
      _add: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "whitelistFeeAccount(address,bool)"(
      _user: string,
      _add: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    onDeposit(
      lpToken: null,
      user: null,
      amount: null,
      lockDate: null,
      unlockBlock: null
    ): EventFilter;

    onWithdraw(lpToken: null, amount: null): EventFilter;
  };

  estimateGas: {
    gFees(overrides?: CallOverrides): Promise<BigNumber>;

    "gFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLockedTokenAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLockedTokenAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumLockedTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumLockedTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumLocksForToken(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNumLocksForToken(address)"(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLockForTokenAtIndex(
      _user: string,
      _lpToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserLockForTokenAtIndex(address,address,uint256)"(
      _user: string,
      _lpToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLockedTokenAtIndex(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserLockedTokenAtIndex(address,uint256)"(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserNumLockedTokens(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserNumLockedTokens(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserNumLocksForToken(
      _user: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserNumLocksForToken(address,address)"(
      _user: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserWhitelistStatus(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserWhitelistStatus(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelistedUserAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWhitelistedUserAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWhitelistedUsersLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getWhitelistedUsersLength()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementLock(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incrementLock(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _kukuswapFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      _kukuswapFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    kukuswapFactory(overrides?: CallOverrides): Promise<BigNumber>;

    "kukuswapFactory()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockLPToken(
      _lpToken: string,
      _amount: BigNumberish,
      _unlock_block: BigNumberish,
      _fee_in_kcs: boolean,
      _withdrawer: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "lockLPToken(address,uint256,uint256,bool,address)"(
      _lpToken: string,
      _amount: BigNumberish,
      _unlock_block: BigNumberish,
      _fee_in_kcs: boolean,
      _withdrawer: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    relock(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _unlock_block: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "relock(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _unlock_block: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setDev(_devaddr: string, overrides?: Overrides): Promise<BigNumber>;

    "setDev(address)"(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFee(
      _kcsFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFee(uint256,uint256)"(
      _kcsFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    splitLock(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "splitLock(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    tokenLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenLocks(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferLockOwnership(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferLockOwnership(address,uint256,uint256,address)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    whitelistFeeAccount(
      _user: string,
      _add: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "whitelistFeeAccount(address,bool)"(
      _user: string,
      _add: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    gFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gFees()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLockedTokenAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLockedTokenAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumLockedTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumLockedTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumLocksForToken(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumLocksForToken(address)"(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLockForTokenAtIndex(
      _user: string,
      _lpToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserLockForTokenAtIndex(address,address,uint256)"(
      _user: string,
      _lpToken: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLockedTokenAtIndex(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserLockedTokenAtIndex(address,uint256)"(
      _user: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserNumLockedTokens(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserNumLockedTokens(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserNumLocksForToken(
      _user: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserNumLocksForToken(address,address)"(
      _user: string,
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserWhitelistStatus(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserWhitelistStatus(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelistedUserAtIndex(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWhitelistedUserAtIndex(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWhitelistedUsersLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWhitelistedUsersLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementLock(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incrementLock(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _kukuswapFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _kukuswapFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    kukuswapFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kukuswapFactory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockLPToken(
      _lpToken: string,
      _amount: BigNumberish,
      _unlock_block: BigNumberish,
      _fee_in_kcs: boolean,
      _withdrawer: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "lockLPToken(address,uint256,uint256,bool,address)"(
      _lpToken: string,
      _amount: BigNumberish,
      _unlock_block: BigNumberish,
      _fee_in_kcs: boolean,
      _withdrawer: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relock(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _unlock_block: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "relock(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _unlock_block: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setDev(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDev(address)"(
      _devaddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFee(
      _kcsFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFee(uint256,uint256)"(
      _kcsFee: BigNumberish,
      _liquidityFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    splitLock(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "splitLock(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    tokenLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenLocks(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferLockOwnership(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferLockOwnership(address,uint256,uint256,address)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    whitelistFeeAccount(
      _user: string,
      _add: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "whitelistFeeAccount(address,bool)"(
      _user: string,
      _add: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256,uint256,uint256)"(
      _lpToken: string,
      _index: BigNumberish,
      _lockID: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
