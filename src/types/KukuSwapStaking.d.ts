/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface KukuSwapStakingInterface extends ethers.utils.Interface {
  functions: {
    "KUKU()": FunctionFragment;
    "WKCS()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authorize(address,bool)": FunctionFragment;
    "authorized(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimed(address,uint256)": FunctionFragment;
    "createDistribution(uint256,address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "distributions(uint256)": FunctionFragment;
    "enter(uint256)": FunctionFragment;
    "getDistributionShareBalance(uint256,address)": FunctionFragment;
    "getRewardsAmount(address,address)": FunctionFragment;
    "getStakingAmount(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initKukuBalance()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isKukuBalanceInit()": FunctionFragment;
    "lastDistributionIndex()": FunctionFragment;
    "leave(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "shares(uint256,address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalStakingKuku()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateTokenAddress(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "KUKU", values?: undefined): string;
  encodeFunctionData(functionFragment: "WKCS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorize",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "authorized", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDistribution",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "enter", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getDistributionShareBalance",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsAmount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initKukuBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isKukuBalanceInit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastDistributionIndex",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "leave", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shares",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalStakingKuku",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenAddress",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "KUKU", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WKCS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authorized", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionShareBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initKukuBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isKukuBalanceInit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastDistributionIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStakingKuku",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenAddress",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class KukuSwapStaking extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: KukuSwapStakingInterface;

  functions: {
    KUKU(overrides?: CallOverrides): Promise<[string]>;

    "KUKU()"(overrides?: CallOverrides): Promise<[string]>;

    WKCS(overrides?: CallOverrides): Promise<[string]>;

    "WKCS()"(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorize(
      _user: string,
      isAuth: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "authorize(address,bool)"(
      _user: string,
      isAuth: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "claimed(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createDistribution(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createDistribution(uint256,address)"(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        shares: BigNumber;
        amount: BigNumber;
        token: string;
      }
    >;

    "distributions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        shares: BigNumber;
        amount: BigNumber;
        token: string;
      }
    >;

    enter(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enter(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDistributionShareBalance(
      _distributionIndex: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { share: BigNumber }>;

    "getDistributionShareBalance(uint256,address)"(
      _distributionIndex: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { share: BigNumber }>;

    getRewardsAmount(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountToClaim: BigNumber }>;

    "getRewardsAmount(address,address)"(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountToClaim: BigNumber }>;

    getStakingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "getStakingAmount(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initKukuBalance(overrides?: Overrides): Promise<ContractTransaction>;

    "initKukuBalance()"(overrides?: Overrides): Promise<ContractTransaction>;

    initialize(
      _KUKU: string,
      _WKCS: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _KUKU: string,
      _WKCS: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isKukuBalanceInit(overrides?: CallOverrides): Promise<[boolean]>;

    "isKukuBalanceInit()"(overrides?: CallOverrides): Promise<[boolean]>;

    lastDistributionIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastDistributionIndex()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    leave(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "leave(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    shares(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "shares(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalStakingKuku(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalStakingKuku()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateTokenAddress(
      _kuku: string,
      _wkcs: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateTokenAddress(address,address)"(
      _kuku: string,
      _wkcs: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  KUKU(overrides?: CallOverrides): Promise<string>;

  "KUKU()"(overrides?: CallOverrides): Promise<string>;

  WKCS(overrides?: CallOverrides): Promise<string>;

  "WKCS()"(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorize(
    _user: string,
    isAuth: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "authorize(address,bool)"(
    _user: string,
    isAuth: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "authorized(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimed(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "claimed(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createDistribution(
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createDistribution(uint256,address)"(
    _amount: BigNumberish,
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  distributions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      shares: BigNumber;
      amount: BigNumber;
      token: string;
    }
  >;

  "distributions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string] & {
      shares: BigNumber;
      amount: BigNumber;
      token: string;
    }
  >;

  enter(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enter(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDistributionShareBalance(
    _distributionIndex: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDistributionShareBalance(uint256,address)"(
    _distributionIndex: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardsAmount(
    _user: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRewardsAmount(address,address)"(
    _user: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakingAmount(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getStakingAmount(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initKukuBalance(overrides?: Overrides): Promise<ContractTransaction>;

  "initKukuBalance()"(overrides?: Overrides): Promise<ContractTransaction>;

  initialize(
    _KUKU: string,
    _WKCS: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _KUKU: string,
    _WKCS: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isKukuBalanceInit(overrides?: CallOverrides): Promise<boolean>;

  "isKukuBalanceInit()"(overrides?: CallOverrides): Promise<boolean>;

  lastDistributionIndex(overrides?: CallOverrides): Promise<BigNumber>;

  "lastDistributionIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

  leave(
    _share: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "leave(uint256)"(
    _share: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  shares(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "shares(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalStakingKuku(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStakingKuku()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateTokenAddress(
    _kuku: string,
    _wkcs: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateTokenAddress(address,address)"(
    _kuku: string,
    _wkcs: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    KUKU(overrides?: CallOverrides): Promise<string>;

    "KUKU()"(overrides?: CallOverrides): Promise<string>;

    WKCS(overrides?: CallOverrides): Promise<string>;

    "WKCS()"(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorize(
      _user: string,
      isAuth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "authorize(address,bool)"(
      _user: string,
      isAuth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "claimed(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createDistribution(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "createDistribution(uint256,address)"(
      _amount: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        shares: BigNumber;
        amount: BigNumber;
        token: string;
      }
    >;

    "distributions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        shares: BigNumber;
        amount: BigNumber;
        token: string;
      }
    >;

    enter(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "enter(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDistributionShareBalance(
      _distributionIndex: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDistributionShareBalance(uint256,address)"(
      _distributionIndex: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsAmount(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardsAmount(address,address)"(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStakingAmount(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initKukuBalance(overrides?: CallOverrides): Promise<void>;

    "initKukuBalance()"(overrides?: CallOverrides): Promise<void>;

    initialize(
      _KUKU: string,
      _WKCS: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _KUKU: string,
      _WKCS: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isKukuBalanceInit(overrides?: CallOverrides): Promise<boolean>;

    "isKukuBalanceInit()"(overrides?: CallOverrides): Promise<boolean>;

    lastDistributionIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "lastDistributionIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    leave(_share: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "leave(uint256)"(
      _share: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    shares(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "shares(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalStakingKuku(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakingKuku()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenAddress(
      _kuku: string,
      _wkcs: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateTokenAddress(address,address)"(
      _kuku: string,
      _wkcs: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimateGas: {
    KUKU(overrides?: CallOverrides): Promise<BigNumber>;

    "KUKU()"(overrides?: CallOverrides): Promise<BigNumber>;

    WKCS(overrides?: CallOverrides): Promise<BigNumber>;

    "WKCS()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    authorize(
      _user: string,
      isAuth: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "authorize(address,bool)"(
      _user: string,
      isAuth: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    authorized(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimed(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createDistribution(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createDistribution(uint256,address)"(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enter(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "enter(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getDistributionShareBalance(
      _distributionIndex: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDistributionShareBalance(uint256,address)"(
      _distributionIndex: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardsAmount(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRewardsAmount(address,address)"(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStakingAmount(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initKukuBalance(overrides?: Overrides): Promise<BigNumber>;

    "initKukuBalance()"(overrides?: Overrides): Promise<BigNumber>;

    initialize(
      _KUKU: string,
      _WKCS: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _KUKU: string,
      _WKCS: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isKukuBalanceInit(overrides?: CallOverrides): Promise<BigNumber>;

    "isKukuBalanceInit()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastDistributionIndex(overrides?: CallOverrides): Promise<BigNumber>;

    "lastDistributionIndex()"(overrides?: CallOverrides): Promise<BigNumber>;

    leave(_share: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "leave(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    shares(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "shares(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakingKuku(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakingKuku()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateTokenAddress(
      _kuku: string,
      _wkcs: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateTokenAddress(address,address)"(
      _kuku: string,
      _wkcs: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    KUKU(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "KUKU()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WKCS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WKCS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    authorize(
      _user: string,
      isAuth: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "authorize(address,bool)"(
      _user: string,
      isAuth: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    authorized(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "authorized(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createDistribution(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createDistribution(uint256,address)"(
      _amount: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enter(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enter(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDistributionShareBalance(
      _distributionIndex: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDistributionShareBalance(uint256,address)"(
      _distributionIndex: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardsAmount(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRewardsAmount(address,address)"(
      _user: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingAmount(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStakingAmount(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initKukuBalance(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initKukuBalance()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    initialize(
      _KUKU: string,
      _WKCS: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _KUKU: string,
      _WKCS: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isKukuBalanceInit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isKukuBalanceInit()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastDistributionIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastDistributionIndex()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leave(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "leave(uint256)"(
      _share: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    shares(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "shares(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakingKuku(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalStakingKuku()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateTokenAddress(
      _kuku: string,
      _wkcs: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateTokenAddress(address,address)"(
      _kuku: string,
      _wkcs: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
