/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface KukuSwapPresaleLockForwarderInterface extends ethers.utils.Interface {
  functions: {
    "KUKUSWAP_LOCKER()": FunctionFragment;
    "KUKU_FACTORY()": FunctionFragment;
    "PRESALE_FACTORY()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "kukuswapPairIsInitialised(address,address)": FunctionFragment;
    "lockLiquidity(address,address,uint256,uint256,uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "KUKUSWAP_LOCKER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KUKU_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRESALE_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "kukuswapPairIsInitialised",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockLiquidity",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "KUKUSWAP_LOCKER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KUKU_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRESALE_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kukuswapPairIsInitialised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class KukuSwapPresaleLockForwarder extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: KukuSwapPresaleLockForwarderInterface;

  functions: {
    KUKUSWAP_LOCKER(overrides?: CallOverrides): Promise<[string]>;

    "KUKUSWAP_LOCKER()"(overrides?: CallOverrides): Promise<[string]>;

    KUKU_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    "KUKU_FACTORY()"(overrides?: CallOverrides): Promise<[string]>;

    PRESALE_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    "PRESALE_FACTORY()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _factory: string,
      _locker: string,
      _kukuFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _factory: string,
      _locker: string,
      _kukuFactory: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    kukuswapPairIsInitialised(
      _token0: string,
      _token1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "kukuswapPairIsInitialised(address,address)"(
      _token0: string,
      _token1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockLiquidity(
      _baseToken: string,
      _saleToken: string,
      _baseAmount: BigNumberish,
      _saleAmount: BigNumberish,
      _unlock_block: BigNumberish,
      _withdrawer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lockLiquidity(address,address,uint256,uint256,uint256,address)"(
      _baseToken: string,
      _saleToken: string,
      _baseAmount: BigNumberish,
      _saleAmount: BigNumberish,
      _unlock_block: BigNumberish,
      _withdrawer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  KUKUSWAP_LOCKER(overrides?: CallOverrides): Promise<string>;

  "KUKUSWAP_LOCKER()"(overrides?: CallOverrides): Promise<string>;

  KUKU_FACTORY(overrides?: CallOverrides): Promise<string>;

  "KUKU_FACTORY()"(overrides?: CallOverrides): Promise<string>;

  PRESALE_FACTORY(overrides?: CallOverrides): Promise<string>;

  "PRESALE_FACTORY()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _factory: string,
    _locker: string,
    _kukuFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _factory: string,
    _locker: string,
    _kukuFactory: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  kukuswapPairIsInitialised(
    _token0: string,
    _token1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "kukuswapPairIsInitialised(address,address)"(
    _token0: string,
    _token1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockLiquidity(
    _baseToken: string,
    _saleToken: string,
    _baseAmount: BigNumberish,
    _saleAmount: BigNumberish,
    _unlock_block: BigNumberish,
    _withdrawer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lockLiquidity(address,address,uint256,uint256,uint256,address)"(
    _baseToken: string,
    _saleToken: string,
    _baseAmount: BigNumberish,
    _saleAmount: BigNumberish,
    _unlock_block: BigNumberish,
    _withdrawer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    KUKUSWAP_LOCKER(overrides?: CallOverrides): Promise<string>;

    "KUKUSWAP_LOCKER()"(overrides?: CallOverrides): Promise<string>;

    KUKU_FACTORY(overrides?: CallOverrides): Promise<string>;

    "KUKU_FACTORY()"(overrides?: CallOverrides): Promise<string>;

    PRESALE_FACTORY(overrides?: CallOverrides): Promise<string>;

    "PRESALE_FACTORY()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _factory: string,
      _locker: string,
      _kukuFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _factory: string,
      _locker: string,
      _kukuFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    kukuswapPairIsInitialised(
      _token0: string,
      _token1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "kukuswapPairIsInitialised(address,address)"(
      _token0: string,
      _token1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockLiquidity(
      _baseToken: string,
      _saleToken: string,
      _baseAmount: BigNumberish,
      _saleAmount: BigNumberish,
      _unlock_block: BigNumberish,
      _withdrawer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "lockLiquidity(address,address,uint256,uint256,uint256,address)"(
      _baseToken: string,
      _saleToken: string,
      _baseAmount: BigNumberish,
      _saleAmount: BigNumberish,
      _unlock_block: BigNumberish,
      _withdrawer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    KUKUSWAP_LOCKER(overrides?: CallOverrides): Promise<BigNumber>;

    "KUKUSWAP_LOCKER()"(overrides?: CallOverrides): Promise<BigNumber>;

    KUKU_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    "KUKU_FACTORY()"(overrides?: CallOverrides): Promise<BigNumber>;

    PRESALE_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    "PRESALE_FACTORY()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _factory: string,
      _locker: string,
      _kukuFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _factory: string,
      _locker: string,
      _kukuFactory: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    kukuswapPairIsInitialised(
      _token0: string,
      _token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "kukuswapPairIsInitialised(address,address)"(
      _token0: string,
      _token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockLiquidity(
      _baseToken: string,
      _saleToken: string,
      _baseAmount: BigNumberish,
      _saleAmount: BigNumberish,
      _unlock_block: BigNumberish,
      _withdrawer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "lockLiquidity(address,address,uint256,uint256,uint256,address)"(
      _baseToken: string,
      _saleToken: string,
      _baseAmount: BigNumberish,
      _saleAmount: BigNumberish,
      _unlock_block: BigNumberish,
      _withdrawer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    KUKUSWAP_LOCKER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "KUKUSWAP_LOCKER()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KUKU_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "KUKU_FACTORY()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRESALE_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PRESALE_FACTORY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _factory: string,
      _locker: string,
      _kukuFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _factory: string,
      _locker: string,
      _kukuFactory: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    kukuswapPairIsInitialised(
      _token0: string,
      _token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "kukuswapPairIsInitialised(address,address)"(
      _token0: string,
      _token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockLiquidity(
      _baseToken: string,
      _saleToken: string,
      _baseAmount: BigNumberish,
      _saleAmount: BigNumberish,
      _unlock_block: BigNumberish,
      _withdrawer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lockLiquidity(address,address,uint256,uint256,uint256,address)"(
      _baseToken: string,
      _saleToken: string,
      _baseAmount: BigNumberish,
      _saleAmount: BigNumberish,
      _unlock_block: BigNumberish,
      _withdrawer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
